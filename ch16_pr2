#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
//#include"readline.h"
#define NAME_NUM 25
#define MAX_PARTS 100
/*
struct name {
	char first[NAME_NUM + 1];
	char last[NAME_NUM + 1];
};*/
struct part {
	int number;
	char names[NAME_NUM +1];
	int on_hand;
}inventory[MAX_PARTS];

int num_parts = 0;//number of parts currently stored

int find_part(int num);
void insert(void);
void search(void);
void update(void);
void print(void);
int readline(char arr[], int n)
{
	int ch, i = 0;
	while (isspace(ch = getchar()))//((ch=getchar)!=' ')보다는 white space전체 스킵해주는 기능으로 적합
		;
	while (ch != '\n'&&ch != EOF)
	{
		if (i<n)
			arr[i] = ch;
		i++;
		ch = getchar();
	}
	arr[i] = '\0';

	return i;
}
int main(void)
{
	//Add a new part number, part name, and initial quantity on hand.
	//Given a part number, print the name of the part and the current quality on hand.
	//Given a part number, change the quantity on hand.
	//Print a table showing all information in the database.
	//Terminate program execution.
	for (;;)
	{
		printf("Enter operation code: ");
		char ch;
		scanf(" %c", &ch);
		while (getchar() != '\n')
			;						//skip to the end line
		switch (ch)
		{
		case 'i': 
			insert();
			break;
		case 's': 
			search();
			break;
		case 'u': 
			update();
			break;
		case 'p':
			print();
			break;
		case 'q':
			return 0;
		default: printf("Illegal code\n");
		}
		printf("\n");
	}
	return 0;
}

int find_part(int num)
{
	int i;

	for (i = 0; i < num_parts;i++)
	{
		if (inventory[i].number == num)
		{
			return i;
		}
	}
	return -1;
}

void insert(void)
{
	int part_number;

	if (num_parts == MAX_PARTS)
	{
		printf("Database is full; can't add more parts.\n");
		return;
	}


	printf("Enter part number: ");
	scanf("%d", &part_number);

	if (find_part(part_number)>=0) {
		printf("Part already exists.\n");
		return;
	}

	inventory[num_parts].number = part_number;
	printf("Enter part name:");
	readline(inventory[num_parts].names,NAME_NUM);
	printf("Enter quantity on hand: ");
	scanf("%d", &inventory[num_parts].on_hand);
	num_parts++;
}

void search(void)
{
	int part_number,i;
	printf("Enter part number: ");
	scanf("%d", &part_number);
	i = find_part(part_number);
	if (i >= 0)
	{
		printf("Part name: %s\n", inventory[i].names);
		printf("Quantity on hand: %d\n", inventory[i].on_hand);
	}
	else
		printf("Part not found.\n");
	return;
}

void update(void)
{
	int change_num;
	int part_number,i;

	printf("Enter part number: ");
	scanf("%d", &part_number);
	i = find_part(part_number);
	if (i >= 0) {
		printf("Enter change in quantity on hand: ");
		scanf("%d", &change_num);
		inventory[i].on_hand += change_num;
	}
	else
		printf("Part not found.\n");
	return;
}

void print(void)
{
	printf("Part Number   Part Name                        "" Quantity on Hand\n");
	for (int y = 0; y < num_parts; y++)
	{
		for (int x = y; x < num_parts; x++)
		{
			if (inventory[y].number < inventory[x].number) {
				struct part tmp;
				tmp = inventory[y];
				inventory[y] = inventory[x];
				inventory[x] = tmp;
			}
		}
	}
	for (int i = 0; i < num_parts; i++)printf("%7d            %-25s%11d\n",
		inventory[i].number, inventory[i].names, inventory[i].on_hand);
	return;
}
